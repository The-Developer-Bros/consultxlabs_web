generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model User {
  id                  String             @id @default(uuid())
  name                String
  createdAt           DateTime           @default(now())
  email               String             @unique
  image               String?            @db.Text
  username            String?            @unique @db.VarChar(20)
  password            String?
  oauthToken          String?            @unique
  phoneNumber         String?            @unique
  emailVerified       Boolean?           @default(false)
  onboardingCompleted Boolean?           @default(false)
  role                UserRole?          @default(CONSULTEE)
  consultantProfile   ConsultantProfile?
  consulteeProfile    ConsulteeProfile?
  consultantProfileId String?
  consulteeProfileId  String?
  Account             Account[]
  Session             Session[]

  @@index([consultantProfileId])
  @@index([consulteeProfileId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  tokenType         String? @map("token_type")
  scope             String? @map("scope")
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model ConsultantProfile {
  id              String            @id @default(uuid())
  dayAvailability DayAvailability[]
  consultations   Consultation[]
  subscriptions   Subscription[]
  webinars        Webinar[]
  classes         Class[]
  rating          Float?
  specialization  String?
  experience      Int?
  location        String?
  posts           Post[]
  comments        Comment[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model ConsulteeProfile {
  id            String         @id @default(uuid())
  consultations Consultation[]
  subscriptions Subscription[]
  webinars      Webinar[]
  classes       Class[]
  location      String?
  posts         Post[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Post {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  title     String    @db.VarChar(300)
  caption   String    @db.VarChar(1000)
  upvotes   Int       @default(0)
  downvotes Int       @default(0)
  comments  Comment[]

  ConsultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String?

  ConsulteeProfile   ConsulteeProfile? @relation(fields: [consulteeProfileId], references: [id])
  consulteeProfileId String?

  @@index([consultantProfileId])
  @@index([consulteeProfileId])
}

model Comment {
  id                  String             @id @default(uuid())
  createdAt           DateTime           @default(now())
  text                String             @db.VarChar(1000)
  upvotes             Int                @default(0)
  downvotes           Int                @default(0)
  post                Post               @relation(fields: [postId], references: [id])
  postId              String
  ConsultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String?

  @@index([postId])
  @@index([consultantProfileId])
}

model Consultation {
  consultationId String            @id @default(uuid())
  createdAt      DateTime          @default(now())
  consultant     ConsultantProfile @relation(fields: [consultantId], references: [id])
  consultantId   String
  consultee      ConsulteeProfile  @relation(fields: [consulteeId], references: [id])
  consulteeId    String
  startTime      DateTime?         @db.DateTime(0)
  endTime        DateTime?         @db.DateTime(0)
  price          Int?

  @@index([consultantId])
  @@index([consulteeId])
}

model Subscription {
  subscriptionId String             @id @default(uuid())
  consultantId   String?
  startTime      DateTime?          @db.DateTime(0)
  endTime        DateTime?          @db.DateTime(0)
  startDate      DateTime?          @db.Date
  endDate        DateTime?          @db.Date
  price          Int?
  daysOfWeek     DaysOfWeek[]
  consultant     ConsultantProfile? @relation(fields: [consultantId], references: [id])
  consultee      ConsulteeProfile?  @relation(fields: [consulteeId], references: [id])
  consulteeId    String?

  @@index([consultantId], map: "subscription_consultant_fk")
  @@index([consulteeId], map: "subscription_consultee_fk")
}

model Webinar {
  webinarId    String             @id @default(uuid())
  consultantId String?
  startTime    DateTime?          @db.DateTime(0)
  endTime      DateTime?          @db.DateTime(0)
  price        Int?
  consultant   ConsultantProfile? @relation(fields: [consultantId], references: [id])
  consultee    ConsulteeProfile?  @relation(fields: [consulteeId], references: [id])
  consulteeId  String?

  @@index([consultantId], map: "webinar_consultant_fk")
  @@index([consulteeId], map: "webinar_consultee_fk")
}

model Class {
  classId      String             @id @default(uuid())
  consultantId String?
  startTime    DateTime?          @db.DateTime(0)
  endTime      DateTime?          @db.DateTime(0)
  startDate    DateTime?          @db.DateTime(0)
  endDate      DateTime?          @db.DateTime(0)
  price        Int?
  daysOfWeek   DaysOfWeek[]
  consultant   ConsultantProfile? @relation(fields: [consultantId], references: [id])
  consultee    ConsulteeProfile?  @relation(fields: [consulteeId], references: [id])
  consulteeId  String?

  @@index([consultantId], map: "class_consultant_fk")
  @@index([consulteeId], map: "class_consultee_fk")
}

model DayAvailability {
  availabilityId      String             @id @db.VarChar(255)
  day                 DaysOfWeekEnum
  startTime           DateTime?          @db.DateTime(0)
  endTime             DateTime?          @db.DateTime(0)
  ConsultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String?

  @@index([consultantProfileId])
}

model DayAppointment {
  appointmentId String         @id @db.VarChar(255)
  day           DaysOfWeekEnum
  startTime     DateTime?      @db.DateTime(0)
  endTime       DateTime?      @db.DateTime(0)
}

model DaysOfWeek {
  id             String         @id @default(uuid())
  day            DaysOfWeekEnum
  subscription   Subscription   @relation(fields: [subscriptionId], references: [subscriptionId])
  subscriptionId String
  class          Class          @relation(fields: [classId], references: [classId])
  classId        String

  @@index([subscriptionId])
  @@index([classId])
}

enum DaysOfWeekEnum {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum UserRole {
  CONSULTANT
  CONSULTEE
  ADMIN
  STAFF
}
