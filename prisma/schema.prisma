generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

////////////////////////////////////////// DO NOT EDIT //////////////////////////////////////////

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?   @unique
  address       String?   @unique
  accounts      Account[] // This refers to the accounts that the user has connected
  sessions      Session[] // This refers to the sessions that the user has opened

  onboardingCompleted Boolean?           @default(false)
  role                UserRole?          @default(CONSULTEE)
  consultantProfile   ConsultantProfile?
  consulteeProfile    ConsulteeProfile?
  consultantProfileId String?            @unique
  consulteeProfileId  String?            @unique

  attachments             Attachment[]
  comments                Comment[]
  commentLikes            CommentLike[]
  images                  Image[]
  imageLikes              ImageLike[]
  posts                   Post[]
  postLikes               PostLike[]
  postsAttachments        PostsAttachment[]
  usersImages             UsersImage[]
  cookiePreferences       CookiePreference? // Added relation to CookiePreference
  notificationPreferences NotificationPreference? // Added relation to NotificationPreference

  @@index([consultantProfileId])
  @@index([consulteeProfileId])
  @@map("users")
}

model CookiePreference {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @unique
  essential Boolean @default(true)
  analytics Boolean @default(false)
  marketing Boolean @default(false)

  @@map("cookie_preferences")
}

model NotificationPreference {
  id               String  @id @default(cuid())
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String  @unique
  allNotifications Boolean @default(true)
  mentions         Boolean @default(false)
  directMessages   Boolean @default(false)
  updates          Boolean @default(false)

  @@map("notification_preferences")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

//////////////////////////////////////////////////// SOCIAL ENGAGEMENT TEMPLATE ////////////////////////////////////////////////////

model UsersImage {
  id      String @id @default(uuid())
  user    User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId  String
  image   Image  @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  imageId String
  sort    Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, imageId])
}

model CategoryType {
  id    String @id @default(uuid())
  key   String @unique
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  categories Category[]
}

model Category {
  id             String        @id @default(uuid())
  key            String        @unique
  title          String
  categoryType   CategoryType? @relation(fields: [categoryTypeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryTypeId String?

  parentCategoryId String?
  parentCategory   Category?  @relation("CategorySubcategories", fields: [parentCategoryId], references: [id])
  subcategories    Category[] @relation("CategorySubcategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  postsCategories PostsCategory[]
}

model Comment {
  id     String @id @default(uuid())
  body   String @db.Text()
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  parentCommentId String?
  parentComment   Comment?  @relation("CommentSubComments", fields: [parentCommentId], references: [id])
  subComments     Comment[] @relation("CommentSubComments")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  commentLikes  CommentLike[]
  postsComments PostsComment[]
}

model CommentLike {
  id        String  @id @default(uuid())
  comment   Comment @relation(fields: [commentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  commentId String
  user      User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([commentId, userId])
}

model Image {
  id               String  @id @default(uuid())
  fileKey          String
  filename         String
  originalFilename String  @map("original_filename")
  user             User?   @relation(fields: [userId], references: [id])
  userId           String?
  title            String?
  description      String? @db.Text()
  width            Int?
  height           Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  imageLikes  ImageLike[]
  imageTags   ImageTag[]
  postsImages PostsImage[]
  usersImages UsersImage[]
}

model ImageLike {
  id      String @id @default(uuid())
  image   Image  @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  imageId String
  user    User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([imageId, userId])
}

model ImageTag {
  id      String  @id @default(uuid())
  image   Image?  @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  imageId String?
  x       Decimal @db.Decimal(8, 3)
  y       Decimal @db.Decimal(8, 3)
}

model Attachment {
  id               String  @id @default(uuid())
  fileExtension    String?
  fileKey          String
  filename         String
  originalFilename String
  user             User?   @relation(fields: [userId], references: [id])
  userId           String?
  title            String?
  description      String? @db.Text()
  width            Int?
  height           Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  postsAttachments PostsAttachment[]
}

model Post {
  id         String   @id @default(uuid())
  title      String
  body       String   @db.Text()
  bodyData   Json?
  postType   PostType @relation(fields: [postTypeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postTypeId String
  user       User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId     String
  published  Boolean  @default(true)
  isRichText Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  postLikes        PostLike[]
  postPageViews    PostPageView[]
  postsAttachments PostsAttachment[]
  postsCategories  PostsCategory[]
  postsComments    PostsComment[]
  postsImages      PostsImage[]
}

model PostType {
  id    String @id @default(uuid())
  key   String @unique
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  posts Post[]
}

model PostsAttachment {
  id           String     @id @default(uuid())
  post         Post       @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId       String
  attachment   Attachment @relation(fields: [attachmentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  attachmentId String
  sort         Int?

  user   User?   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([postId, attachmentId])
}

model PostsCategory {
  id         String   @id @default(uuid())
  category   Category @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  categoryId String
  post       Post     @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PostsComment {
  id        String  @id @default(uuid())
  comment   Comment @relation(fields: [commentId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  commentId String
  post      Post    @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PostLike {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([postId, userId])
}

model PostPageView {
  id     String @id @default(uuid())
  post   Post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model PostsImage {
  id      String @id @default(uuid())
  image   Image  @relation(fields: [imageId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  imageId String
  post    Post   @relation(fields: [postId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  postId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

model ConsultantProfile {
  id             String   @id @default(uuid())
  rating         Float
  specialization String?
  experience     String?
  location       String?
  onlineStatus   Boolean
  domain         String?
  subDomains     String[]

  scheduleType ScheduleType

  slots Slot[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
}

model ConsulteeProfile {
  id           String  @id @default(uuid())
  location     String?
  onlineStatus Boolean

  slotRequests SlotRequest[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
}

model Slot {
  id                  String             @id @default(uuid())
  date                DateTime?          @db.Date
  dayOfWeek           DayOfWeek?
  timeTzStart         DateTime?          @db.Timetz()
  timeTzEnd           DateTime?          @db.Timetz()
  consultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id], onDelete: Cascade)
  consultantProfileId String?

  slotType SlotType

  slotRequests SlotRequest[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([consultantProfileId])
}

model SlotRequest {
  id     String        @id @default(uuid())
  status RequestStatus @default(PENDING)

  consulteeProfile   ConsulteeProfile @relation(fields: [consulteeProfileId], references: [id])
  consulteeProfileId String

  slot   Slot   @relation(fields: [slotId], references: [id])
  slotId String

  appointment SlotOfAppointment?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([consulteeProfileId, slotId])
}

model SlotOfAppointment {
  id     String        @id @default(uuid())
  status RequestStatus @default(PENDING)

  appointmentsType AppointmentsType

  slotRequest   SlotRequest @relation(fields: [slotRequestId], references: [id])
  slotRequestId String      @unique

  consultation   Consultation? @relation(fields: [consultationId], references: [id])
  consultationId String?       @unique

  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?       @unique

  webinar   Webinar? @relation(fields: [webinarId], references: [id])
  webinarId String?

  class   Class?  @relation(fields: [classId], references: [id])
  classId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Consultation {
  id               String             @id @default(uuid())
  price            Int?
  slotAppointments SlotOfAppointment?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Subscription {
  id               String             @id @default(uuid())
  expiryDate       DateTime
  price            Int?
  slotAppointments SlotOfAppointment?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Webinar {
  id               String              @id @default(uuid())
  price            Int?
  slotAppointments SlotOfAppointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Class {
  id               String              @id @default(uuid())
  expiryDate       DateTime?           @db.Timestamp(3)
  price            Int?
  slotAppointments SlotOfAppointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Newsletter {
  id    String @id @default(uuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

enum UserRole {
  CONSULTANT
  CONSULTEE
  ADMIN
  STAFF
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum ScheduleType {
  WEEKLY
  CUSTOM
}

enum SlotType {
  WEEKLY
  CUSTOM
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum AppointmentsType {
  CONSULTATION
  SUBSCRIPTION
  WEBINAR
  CLASS
}
