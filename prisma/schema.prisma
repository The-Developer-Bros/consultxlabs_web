generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  relationMode = "prisma"
  url          = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  username       String       @unique @db.VarChar(20)
  email          String       @unique
  password       String
  oauthToken     String?      @unique
  phoneNumber    String       @unique
  isMod          Boolean      @default(false)
  isAdmin        Boolean      @default(false)
  emailConfirmed Boolean      @default(false)
  profile        UserProfile?
  account        Account?
}

model UserProfile {
  id                String             @id @default(uuid())
  user              User               @relation(fields: [id], references: [id])
  posts             Post[]
  comments          Comment[]
  consultantProfile ConsultantProfile?
  consulteeProfile  ConsulteeProfile?

  @@index([id])
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @unique
  type              String
  provider          String
  providerAccountId String
  refreshToken      String?
  accessToken       String?
  expiresAt         Int?
  tokenType         String?
  scope             String?
  idToken           String?
  sessionState      String?
  user              User?   @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model ConsultantProfile {
  id              String            @id @default(uuid())
  user            UserProfile       @relation(fields: [userId], references: [id])
  userId          String            @unique
  dayAvailability DayAvailability[]
  consultations   Consultation[]
  subscriptions   Subscription[]
  webinars        Webinar[]
  classes         Class[]
  rating          Float?
  specialization  String?
  experience      Int?
  location        String?
  comments        Comment[]
}

model ConsulteeProfile {
  id            String         @id @default(uuid())
  user          UserProfile    @relation(fields: [userId], references: [id])
  userId        String         @unique
  consultations Consultation[]
  subscriptions Subscription[]
  webinars      Webinar[]
  classes       Class[]
  location      String?
}

model Post {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  title     String      @db.VarChar(300)
  caption   String      @db.VarChar(1000)
  upvotes   Int         @default(0)
  downvotes Int         @default(0)
  comments  Comment[]
  author    UserProfile @relation(fields: [authorId], references: [id])
  authorId  String

  @@index([authorId])
}

model Comment {
  id                  String             @id @default(uuid())
  createdAt           DateTime           @default(now())
  text                String             @db.VarChar(1000)
  upvotes             Int                @default(0)
  downvotes           Int                @default(0)
  author              UserProfile        @relation(fields: [authorId], references: [id])
  authorId            String
  post                Post               @relation(fields: [postId], references: [id])
  postId              String
  ConsultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String?

  @@index([authorId])
  @@index([postId])
  @@index([consultantProfileId])
}

model Consultation {
  consultationId String            @id @default(uuid())
  createdAt      DateTime          @default(now())
  consultant     ConsultantProfile @relation(fields: [consultantId], references: [id])
  consultantId   String
  consultee      ConsulteeProfile  @relation(fields: [consulteeId], references: [id])
  consulteeId    String
  startTime      DateTime?         @db.DateTime(0)
  endTime        DateTime?         @db.DateTime(0)
  price          Int?

  @@index([consultantId])
  @@index([consulteeId])
}

model Subscription {
  subscriptionId String             @id @default(uuid())
  consultantId   String?
  startTime      DateTime?          @db.DateTime(0)
  endTime        DateTime?          @db.DateTime(0)
  startDate      DateTime?          @db.Date
  endDate        DateTime?          @db.Date
  price          Int?
  daysOfWeek     DaysOfWeek[]
  consultant     ConsultantProfile? @relation(fields: [consultantId], references: [id])
  consultee      ConsulteeProfile?  @relation(fields: [consulteeId], references: [id])
  consulteeId    String?

  @@index([consultantId], map: "subscription_consultant_fk")
  @@index([consulteeId], map: "subscription_consultee_fk")
}

model Webinar {
  webinarId    String             @id @default(uuid())
  consultantId String?
  startTime    DateTime?          @db.DateTime(0)
  endTime      DateTime?          @db.DateTime(0)
  price        Int?
  consultant   ConsultantProfile? @relation(fields: [consultantId], references: [id])
  consultee    ConsulteeProfile?  @relation(fields: [consulteeId], references: [id])
  consulteeId  String?

  @@index([consultantId], map: "webinar_consultant_fk")
  @@index([consulteeId], map: "webinar_consultee_fk")
}

model Class {
  classId      String             @id @default(uuid())
  consultantId String?
  startTime    DateTime?          @db.DateTime(0)
  endTime      DateTime?          @db.DateTime(0)
  startDate    DateTime?          @db.DateTime(0)
  endDate      DateTime?          @db.DateTime(0)
  price        Int?
  daysOfWeek   DaysOfWeek[]
  consultant   ConsultantProfile? @relation(fields: [consultantId], references: [id])
  consultee    ConsulteeProfile?  @relation(fields: [consulteeId], references: [id])
  consulteeId  String?

  @@index([consultantId], map: "class_consultant_fk")
  @@index([consulteeId], map: "class_consultee_fk")
}

model DayAvailability {
  availabilityId      String             @id @db.VarChar(255)
  day                 DaysOfWeekEnum
  startTime           DateTime?          @db.DateTime(0)
  endTime             DateTime?          @db.DateTime(0)
  ConsultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String?

  @@index([consultantProfileId])
}

model DayAppointment {
  appointmentId String         @id @db.VarChar(255)
  day           DaysOfWeekEnum
  startTime     DateTime?      @db.DateTime(0)
  endTime       DateTime?      @db.DateTime(0)
}

model DaysOfWeek {
  id             String         @id @default(uuid())
  day            DaysOfWeekEnum
  subscription   Subscription   @relation(fields: [subscriptionId], references: [subscriptionId])
  subscriptionId String
  class          Class          @relation(fields: [classId], references: [classId])
  classId        String

  @@index([subscriptionId])
  @@index([classId])
}

enum DaysOfWeekEnum {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}
