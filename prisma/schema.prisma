generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

////////////////////////////////////////// DO NOT EDIT //////////////////////////////////////////

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String?            @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  sessions            Session[]
  onboardingCompleted Boolean?           @default(false)
  role                UserRole?          @default(CONSULTEE)
  consultantProfile   ConsultantProfile?
  consulteeProfile    ConsulteeProfile?
  consultantProfileId String?
  consulteeProfileId  String?

  @@index([consultantProfileId])
  @@index([consulteeProfileId])
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

//////////////////////////////////////////////////////////////////////////////////////////

model ConsultantProfile {
  id             String  @id @default(uuid())
  rating         Float
  specialization String?
  experience     String?
  location       String?
  onlineStatus   Boolean

  slotsOfAvailability SlotsOfAvailability[]
  consultations       Consultation[]
  subscriptions       Subscription[]
  webinars            Webinar[]
  classes             Class[]
  posts               Post[]
  postComments        PostComment[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model ConsulteeProfile {
  id           String  @id @default(uuid())
  location     String?
  onlineStatus Boolean

  consultations Consultation[]
  subscriptions Subscription[]
  webinars      Webinar[]
  classes       Class[]
  posts         Post[]
  postComments  PostComment[]

  User   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Post {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  title        String        @db.VarChar(300)
  caption      String        @db.VarChar(1000)
  upvotes      Int           @default(0)
  downvotes    Int           @default(0)
  postComments PostComment[]

  ConsultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String?

  ConsulteeProfile   ConsulteeProfile? @relation(fields: [consulteeProfileId], references: [id])
  consulteeProfileId String?

  @@index([consultantProfileId])
  @@index([consulteeProfileId])
}

model PostComment {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  text      String
  upvotes   Int      @default(0)
  downvotes Int      @default(0)
  post      Post     @relation(fields: [postId], references: [id])
  postId    String

  ConsultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String?
  ConsulteeProfile    ConsulteeProfile?  @relation(fields: [consulteeProfileId], references: [id])
  consulteeProfileId  String?

  @@index([postId])
  @@index([consultantProfileId])
}

model Consultation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  price     Int?

  ConsultantProfile   ConsultantProfile @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String
  consultee           ConsulteeProfile  @relation(fields: [consulteeProfileId], references: [id])
  consulteeProfileId  String            @unique

  slotOfAppointment SlotsOfAppointment?
}

model Subscription {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  expiryDate DateTime?
  price      Int?

  ConsultantProfile   ConsultantProfile @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String
  ConsulteeProfile    ConsulteeProfile  @relation(fields: [consulteeProfileId], references: [id])
  consulteeProfileId  String

  slotsOfAppointment SlotsOfAppointment[]
}

model Webinar {
  id    String @id @default(uuid())
  price Int?

  ConsultantProfile   ConsultantProfile  @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String
  consultees          ConsulteeProfile[]

  slotOfAppointment SlotsOfAppointment?
}

model Class {
  id           String    @id @default(uuid())
  consultantId String?
  startTime    DateTime?
  endTime      DateTime?
  startDate    DateTime?
  endDate      DateTime?
  price        Int?

  ConsultantProfile   ConsultantProfile  @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String
  consultees          ConsulteeProfile[]

  slotOfAppointment SlotsOfAppointment[]

  @@index([consultantId])
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model SlotsOfAvailability {
  id                String       @id @default(uuid())
  availabilitySlots SlotTiming[]

  ConsultantProfile   ConsultantProfile? @relation(fields: [consultantProfileId], references: [id])
  consultantProfileId String?
}

model SlotsOfAppointment {
  id               String       @id @default(uuid())
  appointmentSlots SlotTiming[]

  Subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  subscriptionId String?
  Class          Class?        @relation(fields: [classId], references: [id])
  classId        String?
  Consultation   Consultation? @relation(fields: [consultationId], references: [id])
  consultationId String?       @unique
  Webinar        Webinar?      @relation(fields: [webinarId], references: [id])
  webinarId      String?       @unique
}

model SlotTiming {
  slotId    String         @id @default(uuid())
  day       DaysOfWeekEnum
  startTime DateTime?
  endTime   DateTime?

  SlotsOfAvailability   SlotsOfAvailability? @relation(fields: [slotsOfAvailabilityId], references: [id])
  slotsOfAvailabilityId String?
  SlotsOfAppointment    SlotsOfAppointment?  @relation(fields: [slotsOfAppointmentId], references: [id])
  slotsOfAppointmentId  String?
}

enum DaysOfWeekEnum {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

enum UserRole {
  CONSULTANT
  CONSULTEE
  ADMIN
  STAFF
}
