"use client";
/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/6tV77gdctIQ
 */
import { Avatar } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { useToast } from "@/components/ui/use-toast";
import Image from "next/image";
import { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogTrigger,
} from "@/components/ui/dialog";

type TComment = {
  name: string;
  date: string;
  feedback: string;
  rating: number;
};

const comments: TComment[] = [
  {
    name: "Amit Kumar",
    date: "June 27, 2023",
    feedback: "Good doctor, highly recommend 👍",
    rating: 5,
  },
  {
    name: "Rohit Singh",
    date: "June 27, 2023",
    feedback: "good",
    rating: 4,
  },
  {
    name: "Sneha Verma",
    date: "June 27, 2023",
    feedback: "so much good",
    rating: 5,
  },
];

type TUserDetails = {
  id: string;
  name: string;
  email: string;
  emailVerified: string;
  image: string;
  phone: string;
  address: string;
  onboardingCompleted: boolean;
  role: string;
  consultantProfileId: string | null;
  consulteeProfileId: string | null;
};

type TConsultantDetails = {
  id: string;
  rating: number;
  specialization: string;
  experience: string;
  location: string;
  onlineStatus: boolean;
  domain: string;
  subDomains: string[];
  userId: string;
  createdAt: string;
  updatedAt: string;
};

type TSlotTiming = {
  slotId: string;
  dateInISO: string;
  slotStartTimeInUTC: string;
  slotEndTimeInUTC: string;
  slotsOfAvailabilityId: string;
  slotsOfAppointmentId: string;
  startTime: string;
  endTime: string;
};

const fetchConsultantDetails = async (id: string) => {
  try {
    const response = await fetch(`/api/user/consultants/${id}`);
    if (!response.ok) {
      throw new Error("Failed to fetch consultant details");
    }
    return response.json();
  } catch (error: any) {
    console.error("Error fetching consultant details:", error);
    throw new Error("Failed to fetch consultant details");
  }
};

const fetchUserDetails = async (id: string) => {
  try {
    const response = await fetch(`/api/user/${id}`);
    if (!response.ok) {
      throw new Error("Failed to fetch user details");
    }
    return response.json();
  } catch (error: any) {
    console.error("Error fetching user details:", error);
    throw new Error("Failed to fetch user details");
  }
};

export default function ExpertProfile({
  params,
}: {
  readonly params: { consultantId: string };
}) {
  // Check if the consultantId is exists in the database and display the details of the consultant
  // If the consultantId is not found in the database, display an error message
  // If the consultantId is found in the database, display the details of the consultant

  const [userDetails, setUserDetails] = useState<TUserDetails>();

  const [consultantDetails, setConsultantDetails] =
    useState<TConsultantDetails>();

  const [selectedDateTime, setSelectedDateTime] = useState<Date | undefined>(
    undefined
  );
  // const [availableSlots, setAvailableSlots] = useState<TSlotsOfAvailability>();
  const [slotTimings, setSlotTimings] = useState<TSlotTiming[]>([]);
  const [selectedSlot, setSelectedSlot] = useState<TSlotTiming | undefined>();
  const { toast } = useToast();

  useEffect(() => {
    // Fetch consultant details
    const fetchConsultantAndUserInfo = async () => {
      try {
        const data = await fetchConsultantDetails(params.consultantId);
        setConsultantDetails(data);

        const userData = await fetchUserDetails(data.userId);
        setUserDetails(userData.data);
      } catch (error: any) {
        console.error("Error fetching consultant details:", error);
        toast({
          title: "Error fetching consultant details",
          description: error.message,
          variant: "destructive",
        });
      }
    };

    fetchConsultantAndUserInfo();
  }, [params.consultantId, toast]);

  useEffect(() => {
    // Fetch available slots for the selected date
    const fetchSlotTimings = async (date: Date) => {
      try {
        const response = await fetch(
          `/api/slots/availability/${params.consultantId}?date=${date}`
        );

        if (!response.ok) {
          throw new Error("Failed to fetch available slots");
        }

        const data = await response.json();
        const formattedSlots = data.map((slot: TSlotTiming) => {
          return {
            ...slot,
            startTime: new Date(slot.slotStartTimeInUTC).toLocaleTimeString(),
            endTime: new Date(slot.slotEndTimeInUTC).toLocaleTimeString(),
          };
        });

        setSlotTimings(formattedSlots);
        toast({ title: "Slots fetched successfully", variant: "default" });
      } catch (error: any) {
        console.error("Error fetching slots:", error);
        toast({
          title: "Error fetching slots",
          description: error.message,
          variant: "destructive",
        });
      }
    };

    if (selectedDateTime) {
      fetchSlotTimings(selectedDateTime);
    }
  }, [selectedDateTime, params.consultantId, toast]);

  const handleBooking = async () => {
    if (!selectedSlot) {
      toast({ title: "Please select a time slot", variant: "destructive" });
      return;
    }

    try {
      const response = await fetch("/api/book-consultation", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          consultantId: params.consultantId,
          slotId: selectedSlot.slotId,
          date: selectedDateTime,
        }),
      });

      if (response.ok) {
        toast({ title: "Booking request sent successfully" });
      } else {
        toast({
          title: "Failed to send booking request",
          variant: "destructive",
        });
      }
    } catch (error) {
      console.error("Booking error:", error);
      toast({ title: "An error occurred", variant: "destructive" });
    }
  };

  return (
    <div key={params.consultantId} className="flex justify-center py-40">
      <div className="flex flex-col w-1/2">
        <div className="flex items-center mb-6 text-lg">
          <div className="flex flex-col">
            <Badge className="mb-1" variant="outline">
              {consultantDetails?.specialization}
            </Badge>
            <h2 className="text-3xl font-semibold">{userDetails?.name}</h2>
            <div className="flex items-center my-2">
              <StarIcon className="text-blue-500 w-5 h-5" />
              <StarIcon className="text-blue-500 w-5 h-5" />
              <StarIcon className="text-blue-500 w-5 h-5" />
              <StarIcon className="text-blue-500 w-5 h-5" />
              <StarIcon className="text-gray-300 w-5 h-5" />
              <span className="ml-2 text-base">(3)</span>
            </div>
            <p className="text-lg">
              {consultantDetails?.subDomains.join(", ")}
            </p>
          </div>
        </div>
        <div className="mb-6">
          <h3>
            About
            <p className="mt-2 text-gray-500">
              Mr. John Doe is a seasoned business strategist with over 25 years
              of experience in the corporate sector. He has a proven track
              record of driving business growth through innovative strategies
              and leadership. His expertise spans multiple industries, with a
              particular focus on market expansion and operational efficiency.
            </p>
            Expertise and Education
            <p className="mt-2 text-gray-500">
              Mr. Doe holds an MBA from Harvard Business School and a Bachelor’s
              degree in Economics from Stanford University. His professional
              journey includes leadership roles in Fortune 500 companies and he
              is known for his ability to lead complex business transformations.
            </p>
            Client Testimonials
            <p className="mt-2 text-gray-500">
              Clients commend Mr. Doe for his strategic insights, comprehensive
              planning, and result-oriented approach. His ability to identify
              growth opportunities and drive successful implementations has made
              him a trusted advisor to many leading businesses.
            </p>
          </h3>
        </div>
        <div>
          <h3 className="font-semibold text-lg mb-4">All Reviews (3)</h3>
          <div className="space-y-4">
            {comments.map((comment) => (
              <Comment key={comment.name} {...comment} />
            ))}
          </div>
        </div>
      </div>
      <div className="flex flex-col items-center w-1/4 ml-10">
        <Image
          alt="Profile"
          className="rounded-full mb-6"
          height="1350"
          src="/placeholder.svg"
          style={{
            aspectRatio: "1080/1350",
            objectFit: "cover",
          }}
          width="1080"
        />
        <div className="card p-6 bg-white shadow-lg rounded-lg w-full">
          <h3 className="text-lg font-semibold mb-4">Ticket Price</h3>
          <p className="text-3xl font-bold mb-6">INR 599</p>
          <h4 className="font-semibold mb-2">Duration based pricing:</h4>
          <ul className="mb-6">
            <li>1 hour - INR 599</li>
            <li>2 hours - INR 999</li>
            <li>3 hours - INR 1499</li>
          </ul>
          <Dialog>
            <DialogTrigger asChild>
              <Button variant="night">Book Consultation</Button>
            </DialogTrigger>
            <DialogContent className="w-full max-w-[800px] grid grid-cols-1 md:grid-cols-2 gap-6 bg-white rounded-lg p-6">
              <div className="bg-white rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4">Select a Date</h3>
                <Calendar
                  mode="single"
                  selected={
                    selectedDateTime ? new Date(selectedDateTime) : undefined
                  }
                  onSelect={(date) => {
                    if (date) {
                      // setSelectedDateTime(new Date(date.toISOString().split('T')[0]));
                      setSelectedDateTime(new Date(date.toLocaleDateString()));
                    } else {
                      setSelectedDateTime(undefined);
                    }
                  }}
                />
              </div>
              <div className="bg-white rounded-lg p-6">
                <h3 className="text-lg font-semibold mb-4">
                  Available Time Slots
                </h3>
                <div className="grid gap-4 sm:grid-cols-2 md:grid-cols-1 lg:grid-cols-2">
                  {slotTimings && slotTimings.length > 0 ? (
                    slotTimings.map((slot) => (
                      <Button
                        key={slot.slotId}
                        size="sm"
                        variant={
                          selectedSlot?.slotId === slot.slotId
                            ? "night"
                            : "outline"
                        }
                        onClick={() => setSelectedSlot(slot)}
                      >
                        {slot.startTime} - {slot.endTime}
                      </Button>
                    ))
                  ) : (
                    <p>No available slots. Please select a date to refresh.</p>
                  )}
                </div>
              </div>
              <DialogFooter className="col-start-1 col-end-3 flex justify-end gap-4">
                <Button variant="default">Cancel</Button>
                <Button
                  onClick={handleBooking}
                  variant={selectedSlot ? "night" : "outline"}
                >
                  Book Consultation
                </Button>
              </DialogFooter>
            </DialogContent>
          </Dialog>
        </div>
      </div>
    </div>
  );
}

const Comment = ({ name, date, feedback, rating }: TComment) => (
  <div>
    <div className="flex items-center mb-1">
      <Avatar className="w-8 h-8 mr-2" />
      <div>
        <p className="font-semibold">{name}</p>
        <p className="text-sm text-gray-500">{date}</p>
      </div>
    </div>
    <p>{feedback}</p>
    <div className="flex">
      {[...Array(rating)].map((_, i) => (
        <StarIcon
          key={`${name}-${rating}-${i}`}
          className="text-blue-500 w-4 h-4"
        />
      ))}
      {[...Array(5 - rating)].map((_, i) => (
        <StarIcon
          key={`${name}-${rating}-${i}`}
          className="text-gray-300 w-4 h-4"
        />
      ))}
    </div>
  </div>
);

function StarIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  );
}
